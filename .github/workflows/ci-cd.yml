name: ci-cd

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      WORKING_DIR: infrastructure
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3

      - name: Set up Python 3.9.13
        uses: actions/setup-python@v4
        with:
          python-version: "3.9.13"
      
      #- name: Configure AWS Credentials
      #  uses: aws-actions/configure-aws-credentials@v1
      #  with:
      #    aws-access-key-id: $AWS_ACCESS_KEY_ID
      #    aws-secret-access-key: $AWS_SECRET_ACCESS_KEY
      #    aws-region: $AWS_REGION
      
      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2

      - name: Terraform init, validate and plan
        id: plan
        run: |
          echo "** Running Terraform Init**"
          terraform init
          echo "** Running Terraform Validate**"
          terraform validate
          echo "** Running Terraform Plan**"
          terraform plan
        working-directory: ./${{ env.WORKING_DIR }}
      
      - name: Update Pull Request with Plan
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### [${{ env.WORKING_DIR }}] Terraform Plan ðŸ“– \`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: ./${{ env.WORKING_DIR }}